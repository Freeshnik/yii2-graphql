<?php

namespace yiiunit\extensions\graphql;

use GraphQL\GraphQL as GraphQLBase;
use GraphQL\Schema;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\Type;
use GraphQL\Error;
use yii\graphql\exception\SchemaNotFound;
use yii\graphql\GraphQL;
use yiiunit\extensions\graphql\objects\CustomExampleType;
use yiiunit\extensions\graphql\objects\ExamplesQuery;
use yiiunit\extensions\graphql\objects\types\ExampleType;
use yiiunit\extensions\graphql\objects\types\UserType;
use yiiunit\extensions\graphql\objects\UpdateExampleMutation;

/**
 * Created by PhpStorm.
 * User: tsingsun
 * Date: 2016/11/16
 * Time: 下午1:39
 */
class GraphQLTest extends TestCase
{

    /**
     * @var GraphQL
     */
    protected $graphql;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mockWebApplication();
        $this->graphql = \Yii::$app->getModule('graphql')->getGraphQL();
    }


    /**
     * Test schema default
     *
     * @test
     */
    public function testSchema()
    {
        $schema = $this->graphql->schema();

        $this->assertGraphQLSchema($schema);
        $this->assertGraphQLSchemaHasQuery($schema, 'stories');
        $this->assertGraphQLSchemaHasMutation($schema, 'updateUserPwd');
        $this->assertArrayHasKey('user', $schema->getTypeMap());
    }

    /**
     * Test schema with object
     *
     * @test
     */
    public function testSchemaWithSchemaObject()
    {
        $schemaObject = new Schema([
            'query' => new ObjectType([
                'name' => 'Query'
            ]),
            'mutation' => new ObjectType([
                'name' => 'Mutation'
            ]),
            'types' => []
        ]);
        $schema = $this->graphql->schema($schemaObject);

        $this->assertGraphQLSchema($schema);
        $this->assertEquals($schemaObject, $schema);
    }

    /**
     * Test schema with wrong name
     *
     * @test
     * @expectedException SchemaNotFound
     */
    public function testSchemaWithWrongName()
    {
        $schema = $this->graphql->schema('wrong');
    }

    /**
     * Test type
     *
     * @test
     */
    public function testType()
    {
        $type = GraphQL::type(ExampleType::class);
        $this->assertInstanceOf(\GraphQL\Type\Definition\ObjectType::class, $type);

        $typeOther = GraphQL::type('example');
        $this->assertFalse($type === $typeOther);

    }
}
